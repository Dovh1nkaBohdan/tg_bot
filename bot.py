
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, filters, ContextTypes
from config import TOKEN, OPERATOR_CHAT_ID
from init_db import init_db, add_application

# –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó
applications = init_db()

# –°—Ç–∞–Ω –¥–ª—è –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
FULL_NAME, PHONE, ADDRESS, TARIFF = range(4)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üì° –¢–∞—Ä–∏—Ñ–∏", "üìû –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É"], ["üí≥ –û–ø–ª–∞—Ç–∞", "üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–∏"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –Ø ‚Äî –±–æ—Ç –≤–∞—à–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞.", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üì° –¢–∞—Ä–∏—Ñ–∏":
        await update.message.reply_text("–ù–∞—à—ñ —Ç–∞—Ä–∏—Ñ–∏:\nüîπ –ë–∞–∑–æ–≤–∏–π ‚Äî 100 –ú–±—ñ—Ç/—Å ‚Äî 150 –≥—Ä–Ω/–º—ñ—Å\nüîπ –ü—Ä–µ–º—ñ—É–º ‚Äî 300 –ú–±—ñ—Ç/—Å ‚Äî 250 –≥—Ä–Ω/–º—ñ—Å")
    elif text == "üìû –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É":
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë:")
        return FULL_NAME
    elif text == "üí≥ –û–ø–ª–∞—Ç–∞":
        await update.message.reply_text("–°–ø–ª–∞—Ç–∏—Ç–∏ –æ–Ω–ª–∞–π–Ω –º–æ–∂–Ω–∞ —Ç—É—Ç: https://–≤–∞—à—Å–∞–π—Ç/–æ–ø–ª–∞—Ç–∞")
    elif text == "üì≤ –ö–æ–Ω—Ç–∞–∫—Ç–∏":
        await update.message.reply_text("üìû +380961234567\nüè¢ –≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞, 12\nüïê –ü–Ω-–ü—Ç 09:00-18:00")

async def get_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["full_name"] = update.message.text
    await update.message.reply_text("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:")
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    await update.message.reply_text("–ë–∞–∂–∞–Ω–∏–π —Ç–∞—Ä–∏—Ñ (–ë–∞–∑–æ–≤–∏–π / –ü—Ä–µ–º—ñ—É–º):")
    return TARIFF

async def get_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tariff = update.message.text
    full_name = context.user_data["full_name"]
    phone = context.user_data["phone"]
    address = context.user_data["address"]
    
    add_application(full_name, phone, address, tariff)
    
    message = f"üì• –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\nüë§ {full_name}\nüìû {phone}\nüè† {address}\nüì∂ –¢–∞—Ä–∏—Ñ: {tariff}"
    
    # –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    await context.bot.send_message(chat_id=OPERATOR_CHAT_ID, text=message)
    
    await update.message.reply_text("‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞. –û—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("üìû –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É"), handle_message)],
        states={
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_full_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            TARIFF: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_tariff)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()
